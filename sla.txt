import OpenAI from "openai";

const openai = new OpenAI();

async function main() {
  const completion = await openai.chat.completions.create({
    messages: [{ role: "system", content: "You are a helpful assistant." }],
    model: "gpt-3.5-turbo",
  });

  console.log(completion.choices[0]);
}

main();
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Carregar variáveis de ambiente
dotenv.config();

const apiKey = process.env.OPENAI_API_KEY; // Recomenda-se armazenar a chave API em variáveis de ambiente
const speechFile = path.resolve('./speech.mp3');

// Função de pausa
function pausa(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function main() {
  let tentativas = 0;

  while (tentativas < 3) { // Tente até 3 vezes
    try {
      const response = await axios.post('https://api.openai.com/v1/audio/speech', {
        model: "tts-1",
        voice: "alloy",
        input: "Today is a wonderful day to build something people love!",
        max_tokens: 50,
      }, {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
      });

      // Assumindo que a API retorna os dados de áudio diretamente como um buffer binário
      await fs.promises.writeFile(speechFile, response.data);
      console.log(`Arquivo de áudio salvo em: ${speechFile}`);
      return; // Saia do loop e finalize se a solicitação for bem-sucedida
    } catch (error) {
      if (error.response && error.response.status === 429) {
        console.log('Limite de taxa atingido, aguardando antes de tentar novamente...');
        tentativas++;
        await pausa(10000); // Pausa por 10 segundos
      } else {
        console.error('Erro ao gerar áudio:', error.message);
        return; // Saia do loop em caso de outros erros
      }
    }
  }

  console.log('Número máximo de tentativas atingido.');
}

main();
